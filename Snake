import pygame
import time
import random

pygame.init()

# Set up display
width, height = 800, 600
display = pygame.display.set_mode((width, height))
pygame.display.set_caption("Snake Game")

# Colors
white = (255, 255, 255)
black = (0, 0, 0)
red = (255, 0, 0)
green = (0, 255, 0)

# Snake parameters
snake_block = 10
snake_speed = 15

# Initialize snake
snake = [{"x": width / 2, "y": height / 2}]
snake_direction = "RIGHT"
change_to = snake_direction

# Initialize food
food = {"x": round(random.randrange(0, width - snake_block) / 10.0) * 10.0,
        "y": round(random.randrange(0, height - snake_block) / 10.0) * 10.0}

# Game over flag
game_over = False

# Game loop
while not game_over:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            game_over = True
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_LEFT and not snake_direction == "RIGHT":
                change_to = "LEFT"
            elif event.key == pygame.K_RIGHT and not snake_direction == "LEFT":
                change_to = "RIGHT"
            elif event.key == pygame.K_UP and not snake_direction == "DOWN":
                change_to = "UP"
            elif event.key == pygame.K_DOWN and not snake_direction == "UP":
                change_to = "DOWN"

    # Update snake direction
    if change_to == "LEFT" and not snake_direction == "RIGHT":
        snake_direction = "LEFT"
    elif change_to == "RIGHT" and not snake_direction == "LEFT":
        snake_direction = "RIGHT"
    elif change_to == "UP" and not snake_direction == "DOWN":
        snake_direction = "UP"
    elif change_to == "DOWN" and not snake_direction == "UP":
        snake_direction = "DOWN"

    # Move the snake
    if snake_direction == "UP":
        snake[0]["y"] -= snake_block
    elif snake_direction == "DOWN":
        snake[0]["y"] += snake_block
    elif snake_direction == "LEFT":
        snake[0]["x"] -= snake_block
    elif snake_direction == "RIGHT":
        snake[0]["x"] += snake_block

    # Check if the snake has eaten the food
    if snake[0]["x"] == food["x"] and snake[0]["y"] == food["y"]:
        food = {"x": round(random.randrange(0, width - snake_block) / 10.0) * 10.0,
                "y": round(random.randrange(0, height - snake_block) / 10.0) * 10.0}
    else:
        snake.pop()

    # Draw the snake and food
    display.fill(black)
    for segment in snake:
        pygame.draw.rect(display, green, [segment["x"], segment["y"], snake_block, snake_block])
    pygame.draw.rect(display, red, [food["x"], food["y"], snake_block, snake_block])

    # Game over conditions
    if (snake[0]["x"] >= width or snake[0]["x"] < 0 or
            snake[0]["y"] >= height or snake[0]["y"] < 0):
        game_over = True

    # Check if the snake collides with itself
    for segment in snake[1:]:
        if segment["x"] == snake[0]["x"] and segment["y"] == snake[0]["y"]:
            game_over = True

    # Update display
    pygame.display.update()

    # Control snake speed
    pygame.time.Clock().tick(snake_speed)

# Quit the game
pygame.quit()
